

glob_trivial(string) ::= <<
return inputString.equals("<string>");
>>

glob_without_star(pattern_length, char_classes) ::= <<
final int input_length = inputString.length();
int i = 0;
<expect_length_equal_to(pattern_length)>
<char_classes:{char_class |<(char_class.type)(char_class)>}>
return true;
>>

glob_with_star(pattern_length, prefix_chars, first_star) ::= <<
final int input_length = inputString.length();
<expect_length_greater_than(pattern_length)>
<prefix_chars:{char_class |<(char_class.type)(char_class)>}>
<first_star:star()>
return true;
>>


char(node, onmismatch="return false;") ::= <<
if (<mismatched_char(node.char)>) {
    <onmismatch>
}
<next_char()>
>>

mismatched_char(char) ::= <<inputString.charAt(i) != '<char>'>>
matched_char(char) ::= <<inputString.charAt(i) == '<char>'>>

any_char(node, onmismatch="return false;") ::= <<
if (<mismatched_any_char(node)>) {
    <onmismatch>
}
<next_char()>
>>
matched_any_char(node) ::= "<not_eos()>"
mismatched_any_char(node) ::= "<eos()>"

character_class(node, onmismatch="return false;") ::= <<
if (<mismatched_character_class(node)>) {
    <onmismatch>
}
<next_char()>
>>
matched_character_class(node) ::= <%
<node.chars:matched_char(); anchor, separator="\n || ">
%>

mismatched_character_class(node) ::= <%
<node.chars:mismatched_char(); anchor, separator="\n && ">
%>

negated_character_class(node, onmismatch="return false;") ::= <<
if (<mismatched_negated_character_class(node)>) {
    <onmismatch>
}
<next_char()>
>>
matched_negated_character_class(node) ::= <%
<mismatched_character_class(node)>
%>
mismatched_negated_character_class(node) ::= <%
<matched_character_class(node)>
%>

save_index(postfix) ::= <<
int saved<postfix> = i + 1;
>>

restore_index(postfix) ::= <<
i = saved<postfix>;
>>

restore_index_continue(postfix) ::= <<
<restore_index(postfix)>
continue;
>>

next_char_continue() ::= <<
<nextChar()>
continue;
>>

star(node, onmismatch="") ::= <<
while (<not_eos()>) {
    <first(node.chars):{ c | <(c.type)(c, next_char_continue())> }>
    <next_char()>
    <save_index(node.index)>
    <rest(node.chars):{
        c | <(c.type)(c, restore_index_continue(node.index))>
    }>
    <next_char()>;
    <if(node.nextStar)>
    <node.nextStar>
    <else>
    if (<not_eos()>) {
        <restore_index_continue(node.index)>
    }
    return true;
    <endif>
}
>>




next_char() ::= <<
i++;
>>

eos() ::= "i \>= input_length"

not_eos() ::= "i \< input_length"

expect_length_equal_to(pattern_length) ::= <<
if (input_length != <pattern_length>) {
    return false;
}
>>

expect_length_greater_than(pattern_length) ::= <<
if (input_length \< <pattern_length>) {
    return false;
}
>>